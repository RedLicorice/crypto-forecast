        if False:
            for i in range(len(x_test)):
                # logger.info('grid_search {} {} {}/{}'.format(self.name, str(order), i+1, len(x_test)))
                yhat = 0
                try:
                    _left = len(x_test) - i
                    model_fit = self.fit(history[0], y=history[1], params=params)
                    scores.append(model_fit.score(history[0], y=history[1]))
                    # Save test set prediction
                    forecast = model_fit.predict(x_test[i:])  # ToDO: Save model, use new model only if score increases
                    yhat = float(forecast[0])  # Forecast next element of the test set
                    if np.isnan(yhat):
                        yhat = 0
                except Exception as e:
                    errors.append('Error at step {} for config {}: {}'.format(i, str(params), str(e)))
                    pass
                finally:
                    predictions.append(yhat)  # add forecasted y to predictions
                    history[0].append(x_test.iloc[i].values)  # Add an element from test set to history
                    history[1].append(y_test.iloc[i])  # Add an element from test set to history