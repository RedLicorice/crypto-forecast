from sqlalchemy import Column, Integer, DateTime, Text, Boolean, Float
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy import create_engine
from datetime import datetime
from enum import IntEnum
import os

FIXED_TRADING_FEE = 0.05
# Signal labels:
# Labels and predictions use integer encoding, which is mapped as follows
class Signal(IntEnum):
    SELL, HOLD, BUY = range(3)
# Order status:
# - PENDING if the order has not been executed (for example because it is a SHORT type order)
# - OPEN if the order is open (coins have been purchased)
# - CLOSED if the order is closed (coins have been sold)
class OrderStatus(IntEnum):
    PENDING, OPEN, CLOSED = range(3)
# Order types:
# - LONG if we plan an order expecting the price to rise the next day
# - SHORT if we plan an order expecting the price to decrease the next day (so we plan to buy the next day)
class OrderType(IntEnum):
    LONG, SHORT = range(2)

Base = declarative_base()

class Asset(Base):
    __tablename__ = 'asset'
    id = Column(Integer, primary_key=True)
    symbol = Column(Text(), nullable=False, unique=True) # Which coin is this? BTC, ETH, BNB, ...
    balance = Column(Float(decimal_return_scale=8), nullable=False) # How many coins do we own for this asset
    fiat = Column(Float(), nullable=False) # How many FIAT is available for this asset
    long_orders = Column(Float(), nullable=False, default=0) # How many FIAT is available for this asset
    short_orders = Column(Float(), nullable=False, default=0) # How many FIAT is available for this asset

    def get_equity(self, close):
        return self.balance*close + self.fiat

    def can_open_position(self, type, coins, open):
        if type == OrderType.LONG:
            if self.fiat < coins*open:
                return False
        elif type == OrderType.SHORT:
            # FROM INVESTOPEDIA:
            # The margin rule requirements for short sales dictate that 150% of the value of the shares shorted
            # needs to be initially held in the account.
            # Therefore, if the value of the shares shorted is $25,000, the initial margin requirement would be $37,500.
            # This prevents the proceeds from the sale from being used to purchase other shares before the borrowed
            # shares are returned.
            # However, since this includes the $25,000 from the short sale, the investor is only putting up 50%, or $12,500
            requirement = (coins*open) * 1.0 # 1.5
            if self.fiat < requirement:
                return False
        return True

    def can_close_position(self, p):
        if p.type == OrderType.LONG:
            if self.balance < p.coins:
                return False
        elif p.type == OrderType.SHORT:
            # Fiat has been added when SHORT was opened so we just need to pay off the position
            if self.fiat < p.close_fiat_fees():
                return False
        return True

    def position_size(self, close, order_size):
        equity = self.get_equity(close)
        # Determine position sizing
        if order_size < 1:  # If it's a float, use fixed fractional strategy
            order_price = equity * order_size  # Each position is 10% of equity - fixed fractional
        else:  # If it's an integer, use fixed amount strategy
            order_price = order_size
        position_coins = round(order_price / close, 8)
        return position_coins

    def add_position(self, p):
        if not self.can_open_position(p.type, p.coins, p.open_price):
            raise Exception("Can not add position!")
        if p.type == OrderType.LONG:
            self.fiat = round(self.fiat - (p.coins * p.open_price), 3)
            self.balance = round(self.balance + p.coins, 8)
            self.long_orders += 1
        elif p.type == OrderType.SHORT:
            # The margin rule requirements for short sales dictate that 150% of the value of the shares shorted
            # needs to be initially held in the account.
            # Therefore, if the value of the shares shorted is $25,000, the initial margin requirement would be $37,500.
            # This prevents the proceeds from the sale from being used to purchase other shares before the borrowed
            # shares are returned.
            # However, since this includes the $25,000 from the short sale, the investor is only putting up 50%, or $12,500
            self.fiat = round(self.fiat + p.open_fiat(), 3)
            self.short_orders += 1

    def remove_position(self, p):
        if not self.can_close_position(p):
            raise Exception("Can not remove position!")
        if p.type == OrderType.LONG:
            self.fiat = round(self.fiat + p.close_fiat(), 3)
            self.balance = round(self.balance - p.coins, 8)
            self.long_orders -= 1
        elif p.type == OrderType.SHORT:
            # Fiat has been added when SHORT was opened so we just need to pay off the position
            self.fiat = round(self.fiat - p.close_fiat_fees(), 3)
            self.short_orders -= 1


    @staticmethod
    def get_or_create(session, symbol, create = True):
        # Grab balance for current symbol
        asset = session.query(Asset).filter(Asset.symbol == symbol).first()
        if not asset and create:
            asset = Asset(
                symbol=symbol,
                balance=0,
                fiat=10000
            )
            session.add(asset)
        return asset

class Order(Base):
    __tablename__ = 'order'

    id = Column(Integer, primary_key=True)
    symbol = Column(Text(), nullable=False) # Which coin is this? BTC, ETH, BNB, ...
    type = Column(Integer(), nullable=False, default=0) # Order type ie SHORT, LONG, ...
    status = Column(Integer(), nullable=False, default=0) # Order status ie PENDING, OPEN, CLOSED

    coins = Column(Float(), nullable=False, default=0.0)  # Amount of coins in order

    open_price = Column(Float(), nullable=False) # Closing price when the position was opened
    close_price = Column(Float(), nullable=True) # Closing price when the position was closed

    last_price = Column(Float(), nullable=True)  # Price when stop loss was last checked
    stop_loss = Column(Float(), nullable=True) # Stop loss

    open_at = Column(DateTime(), default=datetime.utcnow) # When the order should be executed
    closed_at = Column(DateTime(), nullable=True) # When the order should be closed

    # Results
    profit = Column(Float(), nullable=True) # Profit when the order was closed
    profit_pct = Column(Float(), nullable=True) # Profit percentage when the order was closed

    @staticmethod
    def create(day, symbol, type, close, coins, stop_loss=0.01, open=True):
        o = Order(symbol=symbol, type=type)
        if open:
            o.open(day, close, coins, stop_loss=stop_loss)
        return o

    def get_earning(self):
        if self.status != OrderStatus.CLOSED:
            return None
        if self.type == OrderType.SHORT:
            # In short orders, we sell X coins at the current coin/usd exchange rate.
            # When the position is closed, we pay back those X + I coins (Todo: plus interest, depending on various factors)
            # I = Interest, depends on the brokerage firm coins are borrowed from
            # typical values for cryptocurrencies are ???
            #
            # If you hold an investment on margin for a long period of time,
            # the odds that you will make a profit are stacked against you.
            #
            return self.open_fiat() - self.close_fiat_fees()
        # In long orders, we buy X coins at the current coin/usd exchange rate
        # We sell them back for usd
        return self.close_fiat() - self.open_fiat()

    def get_earning_pct(self):
        if self.status != OrderStatus.CLOSED:
            return None
        if self.type == OrderType.SHORT:
            return self.get_earning() / self.close_fiat()
        return self.get_earning() / self.open_fiat()

    def open(self, day, price, coins, stop_loss=None):
        self.status = OrderStatus.OPEN
        self.open_price = price
        self.last_price = price
        self.coins = coins
        self.stop_loss = price - ((price * stop_loss) /100) if stop_loss else None
        self.close_price = None
        self.closed = False
        self.open_at = day
        self.closed_at = None

    def open_fiat(self):
        if not self.coins or not self.open_price:
            return 0
        return self.coins*self.open_price

    def close(self, day, price):
        self.status = OrderStatus.CLOSED
        self.close_price = price
        self.closed = True
        self.closed_at = day
        self.profit = self.get_earning()
        self.profit_pct = self.get_earning_pct()

    def close_fiat_fees(self):
        if self.type == OrderType.SHORT:
            # When shorting, we need to pay back the debt we have with the broker, as well as fees.
            # Fees are paid in Native tokens
            fee = self.coins
            # Fixed fee for kraken BTCUSD is 0.01%
            fee += self.coins * 0.01 # Fixed fee
            # Variable fee for kraken BTCUSD is 0.01% every 4 hours so 0.12% every 24 hours
            fee +=  self.coins * (0.12 * (self.closed_at - self.open_at).days) # variable fee
            return fee * self.close_price
        elif self.type == OrderType.LONG:
            # When longing, we just pay a fixed fee on the FIAT transaction, when it is opened.
            # Fee is 0.26 if order is matched immediately (taker - matches another order in the book)
            # or 0.16 if order has to wait in the order book (maker - makes a new entry in the order book)
            # We place ourselves in the worst case scenario so use 0.26
            return self.open_fiat() * 0.26


    def close_fiat(self):
        if not self.coins or not self.close_price:
            return 0
        return self.coins*self.close_price

    def adjust_stop(self, pct, close=None):
        self.stop_loss += self.stop_loss * pct
        if close:
            self.last_price = close

    def should_stop(self, close):
        if self.type == OrderType.SHORT:
            return close >= self.stop_loss
        return close <= self.stop_loss

    def price_change_last(self, price=None):
        change = ((price - self.last_price) / self.last_price)
        self.last_price = price
        return change

    def price_change(self, price=None):
        if not price and self.close_price:
            price = self.close_price
        return ((price - self.open_price) / self.open_price)

    def get_age_in_days(self, day = None):
        if not day:
            day = datetime.utcnow()
        return (day - self.open_at).days

def migrate(db_file):
    if not os.path.exists(db_file):
        engine = create_engine('sqlite:///'+db_file)
        Base.metadata.create_all(engine)
        print("Database {} created!".format(db_file))
        return True
    return False